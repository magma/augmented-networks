// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SIMAuthenticatorClient is the client API for SIMAuthenticator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SIMAuthenticatorClient interface {
	// Authentication-Information request RPC
	AuthInfo(ctx context.Context, in *AuthenticationInformationRequest, opts ...grpc.CallOption) (*AuthenticationInformationAnswer, error)
}

type sIMAuthenticatorClient struct {
	cc grpc.ClientConnInterface
}

func NewSIMAuthenticatorClient(cc grpc.ClientConnInterface) SIMAuthenticatorClient {
	return &sIMAuthenticatorClient{cc}
}

func (c *sIMAuthenticatorClient) AuthInfo(ctx context.Context, in *AuthenticationInformationRequest, opts ...grpc.CallOption) (*AuthenticationInformationAnswer, error) {
	out := new(AuthenticationInformationAnswer)
	err := c.cc.Invoke(ctx, "/protos.SIMAuthenticator/AuthInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SIMAuthenticatorServer is the server API for SIMAuthenticator service.
// All implementations must embed UnimplementedSIMAuthenticatorServer
// for forward compatibility
type SIMAuthenticatorServer interface {
	// Authentication-Information request RPC
	AuthInfo(context.Context, *AuthenticationInformationRequest) (*AuthenticationInformationAnswer, error)
	mustEmbedUnimplementedSIMAuthenticatorServer()
}

// UnimplementedSIMAuthenticatorServer must be embedded to have forward compatible implementations.
type UnimplementedSIMAuthenticatorServer struct {
}

func (UnimplementedSIMAuthenticatorServer) AuthInfo(context.Context, *AuthenticationInformationRequest) (*AuthenticationInformationAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthInfo not implemented")
}
func (UnimplementedSIMAuthenticatorServer) mustEmbedUnimplementedSIMAuthenticatorServer() {}

// UnsafeSIMAuthenticatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SIMAuthenticatorServer will
// result in compilation errors.
type UnsafeSIMAuthenticatorServer interface {
	mustEmbedUnimplementedSIMAuthenticatorServer()
}

func RegisterSIMAuthenticatorServer(s grpc.ServiceRegistrar, srv SIMAuthenticatorServer) {
	s.RegisterService(&SIMAuthenticator_ServiceDesc, srv)
}

func _SIMAuthenticator_AuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticationInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SIMAuthenticatorServer).AuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.SIMAuthenticator/AuthInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SIMAuthenticatorServer).AuthInfo(ctx, req.(*AuthenticationInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SIMAuthenticator_ServiceDesc is the grpc.ServiceDesc for SIMAuthenticator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SIMAuthenticator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.SIMAuthenticator",
	HandlerType: (*SIMAuthenticatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthInfo",
			Handler:    _SIMAuthenticator_AuthInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
